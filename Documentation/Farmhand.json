{"doc" : {"assembly" : {"name" : "Farmhand"}, "members" : {"member" : [{"name" : "P:Farmhand.API.Crafting.CraftingRecipe.CraftingRecipes", "summary" : "Contains all custom crafting recipes added to the API"}, {"name" : "M:Farmhand.API.Crafting.CraftingRecipe.RegisterRecipe(Farmhand.API.Crafting.CraftingRecipe)", "summary" : "Adds custom save-safe crafting recipes", "param" : {"name" : "recipe", "text" : "The recipe to add"}, "returns" : "The internal id assigned to this recipe"}, {"name" : "M:Farmhand.API.Crops.Crop.RegisterCrop``1(Farmhand.API.Crops.CropInformation)", "summary" : "Registers a new crop", "param" : {"name" : "crop", "text" : "Information of crop to register"}}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.RegisterNewAnswer(Farmhand.API.Dialogues.Questions,Farmhand.API.Dialogues.DialogueAnswerInformation)", "summary" : "Register a new answer which can be used in dialogs", "param" : [{"name" : "question", "text" : "Question that this answer will be an answer to"}, {"name" : "answer", "text" : "Information about this answer"}]}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.RegisterNewAnswer(System.String,Farmhand.API.Dialogues.DialogueAnswerInformation)", "summary" : "Register a new answer which can be used in dialogs", "param" : [{"name" : "question", "text" : "Question that this answer will be an answer to"}, {"name" : "answer", "text" : "Information about this answer"}]}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.RemoveDefaultAnswer(Farmhand.API.Dialogues.Questions,Farmhand.API.Dialogues.DialogueAnswerRemovalInformation)", "summary" : "Remove a default answer from a question", "param" : [{"name" : "question", "text" : "Question to remove the answer from"}, {"name" : "answer", "text" : "Information about the answer to remove"}]}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.RemoveDefaultAnswer(System.String,Farmhand.API.Dialogues.DialogueAnswerRemovalInformation)", "summary" : "Remove a default answer from a question", "param" : [{"name" : "question", "text" : "Question to remove the answer from"}, {"name" : "answer", "text" : "Information about the answer to remove"}]}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.RegisterNewResult(Farmhand.API.Dialogues.Questions,Farmhand.API.Dialogues.Answers,Farmhand.API.Dialogues.DialogueResultInformation)", "summary" : "Register a new result which can be used by answers, a result is what happens when an answer is selected", "param" : [{"name" : "question", "text" : "The question that was asked to cause this result"}, {"name" : "answer", "text" : "The answer that is selected to cause this result"}, {"name" : "result", "text" : "Information about the result"}]}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.RegisterNewResult(System.String,System.String,Farmhand.API.Dialogues.DialogueResultInformation)", "summary" : "Register a new result which can be used by answers, a result is what happens when an answer is selected", "param" : [{"name" : "question", "text" : "The question that was asked to cause this result"}, {"name" : "answer", "text" : "The answer that is selected to cause this result"}, {"name" : "result", "text" : "Information about the result"}]}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.RegisterQuestion(Farmhand.API.Dialogues.DialogueQuestionInformation)", "summary" : "Register a new question which can be posed to the player through a dialogue", "param" : {"name" : "question", "text" : "Information about the question"}}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.OpenQuestion(Farmhand.API.Dialogues.DialogueQuestionInformation)", "summary" : "Open a dialogue window with a question for the player to answer", "param" : {"name" : "question", "text" : "Information about the question that the dialogue window will be opened with"}}, {"name" : "M:Farmhand.API.Dialogues.Dialogue.OpenStatement(System.String)", "summary" : "Open a dialogue window that informs the player of something", "param" : {"name" : "statement", "text" : "Text to put in the dialogue window"}}, {"name" : "M:Farmhand.API.Locations.LocationUtilities.InjectComponentProperties(xTile.ObjectModel.Component,xTile.ObjectModel.Component)", "summary" : "Merges the properties from the injectingComponent into the targetComponent", "param" : [{"name" : "targetComponent", "text" : "Your target component"}, {"name" : "injectingComponent", "text" : "Your source component"}]}, {"name" : "T:Farmhand.API.Locations.MineShaft", "summary" : "Provides functions relating to the MineShaft location"}, {"name" : "M:Farmhand.API.Locations.MineShaft.AddMonsterSpawnChance(System.Type,Farmhand.API.Monsters.MonsterInformation,System.Double,System.Int32,System.Int32)", "summary" : "Adds the chance for a given monster to spawn", "param" : [{"name" : "monsterType", "text" : "Type of monster that will spawn"}, {"name" : "monsterInformation", "text" : "Information of monster that will spawn"}, {"name" : "spawnWeight", "text" : "Chance that this monster will spawn, the higher the number, the higher the chance, with 1 being the weight of the default monster"}, {"name" : "minLevel", "text" : "earliest mineshaft level that this spawn chance applies"}, {"name" : "maxLevel", "text" : "latest minehsaft level that this spawn chance applies"}]}, {"name" : "T:Farmhand.API.Locations.MineShaft.MineshaftMonsterSpawnChance", "summary" : "A data class which holds monster spawn chance information for the mineshaft"}, {"name" : "T:Farmhand.API.Locations.Location", "summary" : "Provides functions relating to all GameLocations"}, {"name" : "T:Farmhand.API.Player.Player", "summary" : "API layer to interact with the player"}, {"name" : "M:Farmhand.API.Player.Player.AddRecipe(System.String,StardewValley.Farmer)", "summary" : "Adds a recipe to the provided player", "param" : [{"name" : "name", "text" : "The name of the recipe to enable"}, {"name" : "player", "text" : "The player. Defaults to null. If null, will use Game1.player"}]}, {"name" : "T:Farmhand.API.Items.BigCraftable", "summary" : "A class which can be extended from to create big craftable items easier, and provides functionality related to big craftables"}, {"name" : "M:Farmhand.API.Items.BigCraftable.RegisterBigCraftable``1(Farmhand.API.Items.BigCraftableInformation)", "summary" : "Registers a new big craftable", "param" : {"name" : "bigCraftable", "text" : "Information of big craftable to register"}}, {"name" : "T:Farmhand.API.Items.BigCraftableInformation", "summary" : "Contains general big craftables information"}, {"name" : "T:Farmhand.API.Items.Item", "summary" : "Provides functions relating to items"}, {"name" : "M:Farmhand.API.Items.Item.RegisterItem``1(Farmhand.API.Items.ItemInformation)", "summary" : "Registers a new item", "param" : {"name" : "item", "text" : "Information of item to register"}}, {"name" : "T:Farmhand.API.Items.ItemCategory", "summary" : "Category of the item"}, {"name" : "T:Farmhand.API.Items.ItemInformation", "summary" : "Contains general item information"}, {"name" : "T:Farmhand.API.Items.ItemType", "summary" : "Item Type (Alters internal string format)"}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.RegisterShop(Farmhand.Mod,System.String,System.Int32)", "summary" : "Register a new shop that can be used", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shopName", "text" : "String identifier of shop that will be used to refer to it"}, {"name" : "currency", "text" : "Type of currency accepted at this shop"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,Farmhand.API.Shops.Shops,Farmhand.API.Items.ItemInformation,System.Int32,System.Int32)", "summary" : "Add an item to a shop", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shop", "text" : "Shop to add the item to"}, {"name" : "item", "text" : "ItemInformation of item to add"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,Farmhand.API.Shops.Shops,Farmhand.API.Items.ItemInformation,Farmhand.API.Shops.ShopUtilities.CheckIfAddShopStock,System.Int32,System.Int32)", "summary" : "Add an item to a shop", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shop", "text" : "Shop to add the item to"}, {"name" : "item", "text" : "ItemInformation of item to add"}, {"name" : "checkDelegate", "text" : "Delegate method which checks if this item should be in stock"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,Farmhand.API.Shops.Shops,Farmhand.API.Items.BigCraftableInformation,System.Int32,System.Int32)", "summary" : "Add a big craftable to a shop", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shop", "text" : "Shop to add the item to"}, {"name" : "item", "text" : "BigCraftableInformation of item to add"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,Farmhand.API.Shops.Shops,Farmhand.API.Items.BigCraftableInformation,Farmhand.API.Shops.ShopUtilities.CheckIfAddShopStock,System.Int32,System.Int32)", "summary" : "Add a big craftable to a shop", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shop", "text" : "Shop to add the item to"}, {"name" : "item", "text" : "BigCraftableInformation of item to add"}, {"name" : "checkDelegate", "text" : "Delegate method which checks if this item should be in stock"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,System.String,Farmhand.API.Items.ItemInformation,System.Int32,System.Int32)", "summary" : "Add an item to a registered custom shop. This method will NOT add stock to vanilla shops!", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shopName", "text" : "String identifier of the shop to add stock to"}, {"name" : "item", "text" : "ItemInformation of item to add"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,System.String,Farmhand.API.Items.ItemInformation,Farmhand.API.Shops.ShopUtilities.CheckIfAddShopStock,System.Int32,System.Int32)", "summary" : "Add an item to a registered custom shop. This method will NOT add stock to vanilla shops!", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shopName", "text" : "String identifier of the shop to add stock to"}, {"name" : "item", "text" : "ItemInformation of item to add"}, {"name" : "checkDelegate", "text" : "Delegate method which checks if this item should be in stock"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,System.String,Farmhand.API.Items.BigCraftableInformation,System.Int32,System.Int32)", "summary" : "Add a big craftable to a registered custom shop. This method will NOT add stock to vanilla shops!", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shopName", "text" : "String identifier of the shop to add stock to"}, {"name" : "item", "text" : "BigCraftableInformation of item to add"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,System.String,Farmhand.API.Items.BigCraftableInformation,Farmhand.API.Shops.ShopUtilities.CheckIfAddShopStock,System.Int32,System.Int32)", "summary" : "Add a big craftable to a registered custom shop. This method will NOT add stock to vanilla shops!", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shopName", "text" : "String identifier of the shop to add stock to"}, {"name" : "item", "text" : "BigCraftableInformation of item to add"}, {"name" : "checkDelegate", "text" : "Delegate method which checks if this item should be in stock"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,Farmhand.API.Shops.Shops,Farmhand.API.Shops.StockType,System.Int32,System.Int32,System.Int32)", "summary" : "Add an item to a shop", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shop", "text" : "Shop to add the item to"}, {"name" : "stockType", "text" : "The type of Id the item being added is"}, {"name" : "Id", "text" : "Id of the item being added"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,Farmhand.API.Shops.Shops,Farmhand.API.Shops.StockType,System.Int32,Farmhand.API.Shops.ShopUtilities.CheckIfAddShopStock,System.Int32,System.Int32)", "summary" : "Add an item to a shop", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shop", "text" : "Shop to add the item to"}, {"name" : "stockType", "text" : "The type of Id the item being added is"}, {"name" : "Id", "text" : "Id of the item being added"}, {"name" : "checkDelegate", "text" : "Delegate method which checks if this item should be in stock"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,System.String,Farmhand.API.Shops.StockType,System.Int32,System.Int32,System.Int32)", "summary" : "Add an item to a registered custom shop. This method will NOT add stock to vanilla shops!", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shopName", "text" : "String identifier of the shop to add stock to"}, {"name" : "stockType", "text" : "The type of Id the item being added is"}, {"name" : "Id", "text" : "Id of the item being added"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.AddToShopStock(Farmhand.Mod,System.String,Farmhand.API.Shops.StockType,System.Int32,Farmhand.API.Shops.ShopUtilities.CheckIfAddShopStock,System.Int32,System.Int32)", "summary" : "Add an item to a registered custom shop. This method will NOT add stock to vanilla shops!", "param" : [{"name" : "owner", "text" : "Instance of the mod which is submitting this request"}, {"name" : "shopName", "text" : "String identifier of the shop to add stock to"}, {"name" : "stockType", "text" : "The type of Id the item being added is"}, {"name" : "Id", "text" : "Id of the item being added"}, {"name" : "checkDelegate", "text" : "Delegate method which checks if this item should be in stock"}, {"name" : "price", "text" : "optional, price of item"}, {"name" : "stock", "text" : "optional, amount of item in stock"}]}, {"name" : "M:Farmhand.API.Shops.ShopUtilities.GetInternalShopName(Farmhand.Mod,System.String)", "summary" : "Returns the internally used shop string identifier for a given shop", "param" : [{"name" : "owner", "text" : "Instance of the mod which owns the shop"}, {"name" : "shopName", "text" : "String identifier for the shop provided by the mod"}], "returns" : ""}, {"name" : "M:Farmhand.API.Tools.Tool.RegisterTool``1(Farmhand.API.Tools.ToolInformation)", "summary" : "Registers a new tool", "param" : {"name" : "tool", "text" : "Information of tool to register"}}, {"name" : "M:Farmhand.API.Tools.Weapon.RegisterWeapon``1(Farmhand.API.Tools.WeaponInformation)", "summary" : "Registers a new weapon", "param" : {"name" : "weapon", "text" : "Information of weapon to register"}}, {"name" : "T:Farmhand.Attributes.MethodOutputBindAttribute", "summary" : "Gets the otherwise outputted variable from a HookReturnable marked exit method"}, {"name" : "T:Farmhand.Constants", "summary" : "Various useful constants used by the API"}, {"name" : "P:Farmhand.Constants.ModContentDirectory", "summary" : "The directory name under which mods store their mod specific content"}, {"name" : "T:Farmhand.Content.ContentManager", "summary" : "An override for the XNA ContentManager which deals with loading custom XNBs when mods have registered custom overrides. Can also be used by mods to load their own XNB data"}, {"name" : "M:Farmhand.Content.ContentManager.Load``1(System.String)", "summary" : "Load an asset by via a relative (extensionless) path", "typeparam" : {"name" : "T", "text" : "Type of content to return"}, "param" : {"name" : "assetName", "text" : "Content to load"}, "returns" : "Loaded content"}, {"name" : "T:Farmhand.Events.ApiEvents", "summary" : "Contains events relating to the API"}, {"name" : "E:Farmhand.Events.ApiEvents.OnModError", "summary" : "Triggered when a mod throws an unhandled exception"}, {"name" : "E:Farmhand.Events.ApiEvents.OnModPreLoad", "summary" : "Triggers just prior to loading the content/assembly of a mod"}, {"name" : "E:Farmhand.Events.ApiEvents.OnModPostLoad", "summary" : "Triggers just prior to after the content/assembly of a mod"}, {"name" : "E:Farmhand.Events.ApiEvents.OnModLoadError", "summary" : "Triggers when an exception occurs during loading the content/assembly of a mod"}, {"name" : "T:Farmhand.Events.ControlEvents", "summary" : "Contains events relating to controls. (Keyboard/Mouse/Gamepad)"}, {"name" : "E:Farmhand.Events.ControlEvents.OnKeyboardChanged", "summary" : "Triggered on keyboard state change"}, {"name" : "E:Farmhand.Events.ControlEvents.OnKeyPressed", "summary" : "Triggered on key press"}, {"name" : "E:Farmhand.Events.ControlEvents.OnKeyReleased", "summary" : "Triggered on key release"}, {"name" : "E:Farmhand.Events.ControlEvents.OnMouseChanged", "summary" : "Triggered on mouse state change"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerButtonPressed", "summary" : "Triggered on controller button pressed"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerButtonReleased", "summary" : "Triggered on controller button released"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerTriggerPressed", "summary" : "Triggered on controller trigger pressed"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerTriggerReleased", "summary" : "Triggered on controller trigger released"}, {"name" : "M:Farmhand.Events.EventCommon.SafeInvoke(System.EventHandler,System.Object)", "summary" : "Safely invokes an event and reports when mods throw exceptions. This overload handles ordinary EventHandler events", "param" : [{"name" : "evt", "text" : "Event to throw"}, {"name" : "sender", "text" : "Sender to pass to event"}]}, {"name" : "M:Farmhand.Events.EventCommon.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)", "summary" : "Safely invokes an event and reports when mods throw exceptions. This overload handles delegates with custom arguments", "typeparam" : {"name" : "T", "text" : "Type of event arguments. Must inherit from EventArgs"}, "param" : [{"name" : "evt", "text" : "Event to throw"}, {"name" : "sender", "text" : "Sender to pass to event"}, {"name" : "args", "text" : "Arguments to pass to event"}]}, {"name" : "M:Farmhand.Events.EventCommon.SafeCancellableInvoke``1(System.EventHandler{``0},System.Object,``0)", "summary" : "Safely invokes an event and reports when mods throw exceptions. This overload handles delegates with custom arguments", "typeparam" : {"name" : "T", "text" : "Type of event arguments. Must inherit from CancelEventArgs"}, "param" : [{"name" : "evt", "text" : "Event to throw"}, {"name" : "sender", "text" : "Sender to pass to event"}, {"name" : "args", "text" : "Arguments to pass to event"}], "returns" : "True when event was canceled by a delegate"}, {"name" : "T:Farmhand.Events.FarmAnimalEvents", "summary" : "Contains events relating to farm animals"}, {"name" : "F:Farmhand.Events.FarmAnimalEvents.OnBeforeEatGrass", "summary" : "Triggers when an animal eats grass"}, {"name" : "F:Farmhand.Events.FarmAnimalEvents.OnMakeSound", "summary" : "Triggers when an animal makes sound"}, {"name" : "F:Farmhand.Events.FarmAnimalEvents.OnFarmerPushing", "summary" : "Triggers when an animal is pushed by a player"}, {"name" : "T:Farmhand.Events.GameEvents", "summary" : "Contains events relating to the main game state"}, {"name" : "T:Farmhand.Events.ListenerType", "summary" : "States which the listener is a pre listener, triggered prior to the function being executed and is cancellation, or a post listener which passes the current returning value of the function prior to returning"}, {"name" : "M:Farmhand.Events.GlobalRouteManager.InitialiseMappings", "summary" : "This method is populated by the installer and contains the index mapping information for GRMable methods"}, {"name" : "M:Farmhand.Events.GlobalRouteManager.IsBeingPreListenedTo(System.Int32)", "summary" : "Returns whether any listeners are attached to this method", "param" : {"name" : "method", "text" : "Index of method"}, "returns" : ""}, {"name" : "M:Farmhand.Events.GlobalRouteManager.IsBeingPostListenedTo(System.Int32)", "summary" : "Returns whether any listeners are attached to this method", "param" : {"name" : "method", "text" : "Index of method"}, "returns" : ""}, {"name" : "M:Farmhand.Events.GlobalRouteManager.Listen(Farmhand.Events.ListenerType,System.String,System.String,System.Action{Farmhand.Events.Arguments.GlobalRoute.EventArgsGlobalRoute})", "summary" : "Attach a listener and enable the global route table", "param" : [{"name" : "listenerType"}, {"name" : "type", "text" : "The type containing the method to listen for"}, {"name" : "method", "text" : "The method to listen for"}, {"name" : "callback", "text" : "The delegate to add"}]}, {"name" : "M:Farmhand.Events.GlobalRouteManager.Remove(System.String,System.String,System.Action{Farmhand.Events.Arguments.GlobalRoute.EventArgsGlobalRoute})", "summary" : "Remove an attached listener and disable the global route table if no listeners are attached", "param" : [{"name" : "type", "text" : "The type containing the method to listen for"}, {"name" : "method", "text" : "The method to listen for"}, {"name" : "callback", "text" : "The delegate to remove. This must be the same instance used when first registering the listener"}]}, {"name" : "T:Farmhand.Events.GraphicsEvents", "summary" : "Contains events relating to graphics"}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPreRenderEvent", "summary" : "Occurs before anything is drawn."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPreRenderGuiEvent", "summary" : "Occurs before the GUI is drawn."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPostRenderGuiEvent", "summary" : "Occurs after the GUI is drawn."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPreRenderHudEvent", "summary" : "Occurs before the HUD is drawn."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPostRenderHudEvent", "summary" : "Occurs after the HUD is drawn."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPostRenderEvent", "summary" : "Occurs after everything is drawn."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPreRenderGuiEventNoCheck", "summary" : "Occurs before the GUI is drawn. Does not check for conditional statements."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPostRenderGuiEventNoCheck", "summary" : "Occurs after the GUI is drawn. Does not check for conditional statements."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPreRenderHudEventNoCheck", "summary" : "Occurs before the HUD is drawn. Does not check for conditional statements."}, {"name" : "E:Farmhand.Events.GraphicsEvents.OnPostRenderHudEventNoCheck", "summary" : "Occurs after the HUD is drawn. Does not check for conditional statements."}, {"name" : "T:Farmhand.Events.EventEvents", "summary" : "Contains events relating to (in-game) events"}, {"name" : "T:Farmhand.Events.LocationEvents", "summary" : "Contains events relating to locations"}, {"name" : "T:Farmhand.Events.MenuEvents", "summary" : "Contains events relating to menus"}, {"name" : "T:Farmhand.Events.PlayerEvents", "summary" : "Contains events relating to players"}, {"name" : "T:Farmhand.Events.SaveEvents", "summary" : "Contains events related to saving/loading"}, {"name" : "E:Farmhand.Events.SaveEvents.OnBeforeSave", "summary" : "Triggered prior to saving"}, {"name" : "E:Farmhand.Events.SaveEvents.OnAfterSaveProgress", "summary" : "Triggered after progress towards saving is made. 100 is complete"}, {"name" : "E:Farmhand.Events.SaveEvents.OnBeforeLoad", "summary" : "Triggered prior to loading"}, {"name" : "E:Farmhand.Events.SaveEvents.OnAfterLoadProgress", "summary" : "Triggered after progress towards loading is made. 100 is complete"}, {"name" : "T:Farmhand.Events.TimeEvents", "summary" : "Contains events relating to time"}, {"name" : "T:Farmhand.Events.UiEvents", "summary" : "Contains events relating to the UI"}, {"name" : "M:Farmhand.Helpers.ArgumentsHelper.ParseArguments(System.String[])", "summary" : "Take the raw args passed to the program and perform relevant actions", "param" : {"name" : "args", "text" : "space split array of arguments"}}, {"name" : "T:Farmhand.Helpers.MersenneTwister", "summary" : "The Mersenne Twister is a pseudorandom number generator."}, {"name" : "M:Farmhand.Helpers.MersenneTwister.#ctor(System.UInt32)", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.MersenneTwister"}}, "param" : {"name" : "seed"}}, {"name" : "M:Farmhand.Helpers.MersenneTwister.#ctor", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.MersenneTwister"}}}, {"name" : "M:Farmhand.Helpers.MersenneTwister.#ctor(System.UInt32[])", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.MersenneTwister"}}, "param" : {"name" : "initKey", "text" : "An array for initializing keys."}}, {"name" : "M:Farmhand.Helpers.MersenneTwister.Finalize", "summary" : ""}, {"name" : "M:Farmhand.Helpers.MersenneTwister.Dispose", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.MersenneTwister"}}}, {"name" : "M:Farmhand.Helpers.MersenneTwister.Dispose(System.Boolean)", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.MersenneTwister"}}}, {"name" : "M:Farmhand.Helpers.MersenneTwister.InitGenRand(System.UInt32)", "summary" : "Initializes mt[N] with a seed.", "param" : {"name" : "seed", "text" : "Seed value."}}, {"name" : "M:Farmhand.Helpers.MersenneTwister.InitByArray(System.UInt32[])", "summary" : "Initialize by an array with array-length.", "param" : {"name" : "initKey", "text" : "An array for initializing keys."}}, {"name" : "M:Farmhand.Helpers.MersenneTwister.GenRandInt32", "summary" : "Generates a random number on [0,0xffffffff]-Interval.", "returns" : "Returns generated number."}, {"name" : "M:Farmhand.Helpers.MersenneTwister.GenRandInt31", "summary" : "Generates a random number on [0,0x7fffffff]-Interval.", "returns" : "Returns generated number."}, {"name" : "M:Farmhand.Helpers.MersenneTwister.GenRandReal1", "summary" : "Generates a random number on [0,1]-real-Interval.", "returns" : "Returns generated number."}, {"name" : "M:Farmhand.Helpers.MersenneTwister.GenRandReal2", "summary" : "Generates a random number on [0,1)-real-Interval.", "returns" : "Returns generated number."}, {"name" : "M:Farmhand.Helpers.MersenneTwister.GenRandReal3", "summary" : "Generates a random number on (0,1)-real-Interval", "returns" : "Returns generated number."}, {"name" : "M:Farmhand.Helpers.MersenneTwister.GenRandRes53", "summary" : "Generates a random number on [0,1) with 53-bit resolution.", "returns" : "Returns generated number."}, {"name" : "M:Farmhand.Helpers.Randomizer.#ctor", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.Randomizer"}}}, {"name" : "M:Farmhand.Helpers.Randomizer.#ctor(System.UInt32)", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.Randomizer"}}, "param" : {"name" : "seed", "text" : "A number used to calculate a starting value for the pseudo-random number sequence."}}, {"name" : "M:Farmhand.Helpers.Randomizer.#ctor(System.Func{System.Double})", "summary" : {"see" : {"cref" : "T:Farmhand.Helpers.Randomizer"}}, "param" : {"name" : "randomGenerator", "see" : {"cref" : "T:System.Double"}}, "exception" : {"cref" : "T:System.ArgumentNullException", "c" : "randomGenerator"}}, {"name" : "M:Farmhand.Helpers.Randomizer.NextBool(System.Int32)", "summary" : "Returns a random bool, either true or false.", "param" : {"name" : "likelihood", "text" : "The default likelihood of success (returning true) is 50%."}, "exception" : {"cref" : "T:System.ArgumentOutOfRangeException", "c" : "likelihood"}, "returns" : "Returns a random bool, either true or false."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextInt(System.Int32,System.Int32)", "summary" : "Returns a random integer.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "exception" : {"cref" : "T:System.ArgumentException", "c" : [{"c" : "min"}, {"c" : "max"}]}, "returns" : "Returns a random integer."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextLong(System.Int64,System.Int64)", "summary" : "Returns a random long.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "exception" : {"cref" : "T:System.ArgumentException", "c" : [{"c" : "min"}, {"c" : "max"}]}, "returns" : "Returns a random long."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextNatural(System.Int32,System.Int32)", "summary" : "Returns a random natural integer.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "exception" : {"cref" : "T:System.ArgumentException", "c" : "min"}, "returns" : "Returns a random natural integer."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextChar(System.String,System.Boolean,System.Boolean,Farmhand.Helpers.CasingRules)", "summary" : "Returns a random character.", "param" : [{"name" : "pool", "text" : "Characters pool"}, {"name" : "alpha", "text" : "Set to True to use only an alphanumeric character."}, {"name" : "symbols", "text" : "Set to true to return only symbols."}, {"name" : "casing", "text" : "Default casing."}], "returns" : "Returns a random character."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextDouble(System.Double,System.Double,System.UInt32)", "summary" : "Returns a random double.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}, {"name" : "decimals", "text" : "Decimals count."}], "returns" : "Returns random generated double."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextString(System.Int32,System.String,System.Boolean,System.Boolean,Farmhand.Helpers.CasingRules)", "summary" : "Returns a random string.", "param" : [{"name" : "length", "text" : "The length of the string."}, {"name" : "pool", "text" : "Characters pool"}, {"name" : "alpha", "text" : "Set to True to use only an alphanumeric character."}, {"name" : "symbols", "text" : "Set to true to return only symbols."}, {"name" : "casing", "text" : "Default casing."}], "exception" : {"cref" : "T:System.ArgumentException", "c" : "length"}, "returns" : "Returns a random string."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextList``1(System.Delegate,System.Int32,System.Object[])", "summary" : "Returns a list of n random terms.", "param" : [{"name" : "generator", "text" : "Generator function to produce items."}, {"name" : "count", "text" : "The count of produced items."}, {"name" : "args", "text" : "The arguments list that will be passed to the generator function."}], "exception" : {"cref" : "T:System.ArgumentNullException", "c" : "generator"}, "returns" : "Returns a list of n random terms."}, {"name" : "M:Farmhand.Helpers.Randomizer.GenerateUniqueList``1(System.Delegate,System.Int32,System.Func{System.Collections.Generic.List{``0},``0,System.Boolean},System.Object[])", "summary" : "Given a function that generates something random and a number of items to generate.", "typeparam" : {"name" : "T", "text" : "The type of the returned list."}, "param" : [{"name" : "generator", "text" : "The function that generates something random."}, {"name" : "count", "text" : "Number of terms to generate."}, {"name" : "comparator", "text" : "Comparator function."}, {"name" : "args", "text" : "The arguments list that will be passed to the generator function."}], "exception" : {"cref" : "T:System.ArgumentNullException", "c" : "generator"}, "returns" : "Returns an array of items where none repeat."}, {"name" : "M:Farmhand.Helpers.Randomizer.ShuffleList``1(System.Collections.Generic.List{``0})", "summary" : "Given a list, scramble the order and return it.", "typeparam" : {"name" : "T", "text" : "The type of the list."}, "param" : {"name" : "list", "text" : "A list to shuffle."}, "returns" : "Returns shuffled list."}, {"name" : "M:Farmhand.Helpers.Randomizer.PickRandomItem``1(System.Collections.Generic.List{``0})", "summary" : "Given a list, returns a single random element.", "typeparam" : {"name" : "T", "text" : "The type of the list."}, "param" : {"name" : "list", "text" : "The list to pick from."}, "exception" : [{"cref" : "T:System.ArgumentNullException", "text" : "Thrown when given list is null."}, {"cref" : "T:System.ArgumentException", "text" : "Thrown when given list is empty."}], "returns" : "Returns random item from the given list."}, {"name" : "M:Farmhand.Helpers.Randomizer.PickRandomSet``1(System.Collections.Generic.List{``0},System.Int32)", "summary" : {"c" : "count"}, "typeparam" : {"name" : "T", "text" : "The type of the list."}, "param" : [{"name" : "list", "text" : "THe list to pick from."}, {"name" : "count", "text" : "Number of items to pick."}], "exception" : [{"cref" : "T:System.ArgumentNullException", "text" : "Thrown when given list is null."}, {"cref" : "T:System.ArgumentException", "text" : "Thrown when given list is empty."}, {"cref" : "T:System.ArgumentException", "c" : "count"}], "returns" : "Returns the set of picked items."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextParagraph(System.Int32)", "summary" : "Return a random paragraph generated from sentences populated by semi-pronounceable random (nonsense) words.", "param" : {"name" : "sentencesCount", "text" : "Number of sentences."}, "returns" : "Returns random generated paragraph."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextSentence(System.Int32,System.Boolean)", "summary" : "Return a random sentence populated by semi-pronounceable random (nonsense) words.", "param" : [{"name" : "wordsCount", "text" : "Number of words."}, {"name" : "punctuation", "text" : "True to use punctuation."}], "returns" : "Returns random generated sentence."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextWord(System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})", "summary" : "Return a semi-pronounceable random (nonsense) word.", "param" : [{"name" : "capitalize", "text" : "True to capitalize a word."}, {"name" : "syllablesCount", "text" : "Number of syllables which the word will have."}, {"name" : "length", "text" : "Length of a word."}], "returns" : "Returns random generated word."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextSyllable(System.Int32,System.Boolean)", "summary" : "Return a semi-speakable syllable, 2 or 3 letters.", "param" : [{"name" : "length", "text" : "Length of a syllable."}, {"name" : "capitalize", "text" : "True to capitalize a syllable."}], "returns" : "Returns random generated syllable."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextAge(Farmhand.Helpers.AgeRanges)", "summary" : "Generates a random age", "param" : {"name" : "types", "text" : "Age range."}, "returns" : "Returns random generated age."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextCPF", "summary" : "Generates a random Brazilian tax Id.", "returns" : "Returns random generated Brazilian tax Id."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextSSN(System.Boolean,System.Boolean)", "summary" : "Generates a random social security number.", "param" : [{"name" : "ssnFour", "text" : "True to generate last 4 digits."}, {"name" : "dashes", "text" : "False to remove dashes."}], "returns" : "Returns random generated social security number."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextYear(System.Int32,System.Int32)", "summary" : "Generates a random year.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "returns" : "Returns random generated year."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextMonth(System.Int32,System.Int32)", "summary" : "Generates a random month.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "exception" : [{"cref" : "T:System.ArgumentOutOfRangeException", "c" : "min"}, {"cref" : "T:System.ArgumentOutOfRangeException", "c" : "max"}, {"cref" : "T:System.ArgumentOutOfRangeException", "c" : [{"c" : "min"}, {"c" : "max"}]}], "returns" : "Returns random generated month."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextSecond", "summary" : "Generates a random second.", "returns" : "Returns random generated second."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextMinute(System.Int32,System.Int32)", "summary" : "Generates a random minute.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "exception" : [{"cref" : "T:System.ArgumentOutOfRangeException", "c" : "min"}, {"cref" : "T:System.ArgumentOutOfRangeException", "c" : "max"}, {"cref" : "T:System.ArgumentOutOfRangeException", "c" : [{"c" : "min"}, {"c" : "max"}]}], "returns" : "Returns random generated minute."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextHour(System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})", "summary" : "Generates a random hour.", "param" : [{"name" : "twentyfourHours", "text" : "True to use 24-hours format."}, {"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "exception" : [{"cref" : "T:System.ArgumentOutOfRangeException", "c" : "min"}, {"cref" : "T:System.ArgumentOutOfRangeException", "c" : "max"}, {"cref" : "T:System.ArgumentOutOfRangeException", "c" : "max"}, {"cref" : "T:System.ArgumentOutOfRangeException", "c" : [{"c" : "min"}, {"c" : "max"}]}], "returns" : "Returns random generated hour."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextMillisecond", "summary" : "Generates a random millisecond.", "returns" : "Returns random generated millisecond."}, {"name" : "M:Farmhand.Helpers.Randomizer.NextDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})", "summary" : "Generates a random date.", "param" : [{"name" : "min", "text" : "Min value."}, {"name" : "max", "text" : "Max value."}], "returns" : "Returns random generated date."}, {"name" : "T:Farmhand.Logging.Log", "summary" : "Contains general purpose logging functionality"}, {"name" : "M:Farmhand.Logging.Log.Success(System.String)", "summary" : "Successful message to display to console and logging.", "param" : {"name" : "message"}}, {"name" : "M:Farmhand.Logging.Log.Warning(System.String)", "summary" : "Warning message to display to console and logging.", "param" : {"name" : "message"}}, {"name" : "M:Farmhand.Logging.Log.Verbose(System.String)", "summary" : "Generic comment to display to console and logging.", "param" : {"name" : "message"}}, {"name" : "M:Farmhand.Logging.Log.Info(System.String)", "summary" : "Message for only console. Does not appear in logging.", "param" : {"name" : "message"}}, {"name" : "M:Farmhand.Logging.Log.Error(System.String)", "summary" : "Important message indicating an error.", "param" : {"name" : "message"}}, {"name" : "T:Farmhand.ConfigExtensions", "summary" : "Contains useful extension methods used by the ModConfiguration class"}, {"name" : "M:Farmhand.ConfigExtensions.Save``1(``0)", "summary" : "Writes a config to a json blob on the disk specified in the config's properties."}, {"name" : "T:Farmhand.Mod", "summary" : "Base type for Farmhand mods."}, {"name" : "P:Farmhand.Mod.ModSettings", "summary" : "Contains information loaded from a mod's Manifest.json. It is populated by the API prior to Entry being called"}, {"name" : "M:Farmhand.Mod.Entry", "summary" : "The Entry method for a mod. This method will be called during the loading process and is intended to let the developer setup"}, {"name" : "M:Farmhand.Mod.LoadConfigurationSettings(System.String)", "summary" : "", "param" : {"name" : "configPath"}}, {"name" : "T:Farmhand.ModConfiguration", "summary" : "This class provides an editable configuration file which mods can save data to. It is useful for things such as saving a Mod's options."}, {"name" : "P:Farmhand.ModConfiguration.ConfigLocation", "summary" : "The location of the mod file"}, {"name" : "P:Farmhand.ModConfiguration.ConfigDir", "summary" : "The directory of the mod file"}, {"name" : "M:Farmhand.ModConfiguration.Instance``1", "summary" : "Creates an instance of a ModConfiguration when called.", "typeparam" : {"name" : "T", "text" : "The mod configuration type. This must derive from ModConfiguration"}, "returns" : ""}, {"name" : "M:Farmhand.ModConfiguration.Load``1(System.String)", "summary" : "Loads the config from the json blob on disk, updating and re-writing to the disk if needed.", "typeparam" : {"name" : "T"}, "returns" : ""}, {"name" : "M:Farmhand.ModConfiguration.GenerateDefaultConfig``1", "summary" : "This is intended to allow developers to populate their Mod Configurations with default data when creating a new one."}, {"name" : "T:Farmhand.ModLoader", "summary" : "Handles loading mods"}, {"name" : "F:Farmhand.ModLoader.ModPaths", "summary" : "This value stores all the valid mod search directories"}, {"name" : "F:Farmhand.ModLoader.UsingSmapiMods", "summary" : "States whether or not we're using SMAPI mods, so that certain things can be disabled if not. Defaults to false and is automatically set by the ModLoader when encountering a SMAPI mod"}, {"name" : "M:Farmhand.ModLoader.DeactivateMod(Farmhand.Mod,Farmhand.ModState,System.Exception)", "summary" : "Forcibly deactivates a mod by detaching it's event listeners.", "param" : [{"name" : "mod", "text" : "The mod to deactive"}, {"name" : "state", "text" : "The new state of this mod. Defaults to ModState.Deactivated"}, {"name" : "error", "text" : "The exception encountered causing the mod to be unloaded. Defaults to null"}]}, {"name" : "M:Farmhand.ModLoader.DeactivateMod(Farmhand.Registries.Containers.ModManifest,Farmhand.ModState,System.Exception)", "summary" : "Forcibly deactivates a mod by detaching it's event listeners.", "param" : [{"name" : "mod", "text" : "The manifest of the mod to deactive"}, {"name" : "state", "text" : "The new state of this mod. Defaults to ModState.Deactivated"}, {"name" : "error", "text" : "The exception encountered causing the mod to be unloaded. Defaults to null"}]}, {"name" : "M:Farmhand.ModLoader.DetachAssemblyDelegates(System.Reflection.Assembly)", "summary" : "Forcibly detaches event delegates associated with a particular assembly", "param" : {"name" : "assembly", "text" : "The assembly the detach"}}, {"name" : "M:Farmhand.ModLoader.ReactivateMod(Farmhand.Mod)", "summary" : "Reattaches disabled delegates for previously disabled mods", "param" : {"name" : "mod", "text" : "The mod to reactivate"}}, {"name" : "M:Farmhand.ModLoader.ReactivateMod(Farmhand.Registries.Containers.ModManifest)", "summary" : "Reattaches disabled delegates for previously disabled mods", "param" : {"name" : "mod", "text" : "The manifest of the mod to reactivate"}}, {"name" : "T:Farmhand.ModState", "summary" : "Contains the variable possible states of a Mod"}, {"name" : "F:Farmhand.ModState.Unloaded", "summary" : "Unloaded mods have not yet been loaded by the ModLoader"}, {"name" : "F:Farmhand.ModState.Loaded", "summary" : "Loaded mods are activate and should be functioning"}, {"name" : "F:Farmhand.ModState.Deactivated", "summary" : "Deactivated mods are ones which were manually deactivated"}, {"name" : "F:Farmhand.ModState.MissingDependency", "summary" : "This mod was found to have a missing dependency by the ModLoader"}, {"name" : "F:Farmhand.ModState.Errored", "summary" : "This mod threw an exception and was forcibly unloaded by the ModLoader"}, {"name" : "F:Farmhand.ModState.InvalidManifest", "summary" : "This mod did not have a valid manifest. Typically this is caused by things such as invalid UniqueIDs or Content issues."}, {"name" : "T:Farmhand.Registries.MapRegistry", "summary" : "Holds a reference to loaded maps."}, {"name" : "M:Farmhand.Registries.MapRegistry.GetRegisteredMaps", "summary" : "Returns all registered maps", "returns" : "All registered maps"}, {"name" : "M:Farmhand.Registries.MapRegistry.GetItem(System.String,Farmhand.Registries.Containers.ModManifest)", "summary" : "Returns item with matching id", "param" : [{"name" : "itemId"}, {"name" : "mod", "text" : "Owning mod, defaults to null"}], "returns" : "Matching map"}, {"name" : "M:Farmhand.Registries.MapRegistry.RegisterItem(System.String,Farmhand.Registries.Containers.ModMap,Farmhand.Registries.Containers.ModManifest)", "summary" : "Registers item with it", "param" : [{"name" : "itemId", "text" : "Id of item to register"}, {"name" : "item", "text" : "Map to register"}, {"name" : "mod", "text" : "Owning mod, defaults to null"}]}, {"name" : "M:Farmhand.Registries.MapRegistry.UnregisterItem(System.String,Farmhand.Registries.Containers.ModManifest)", "summary" : "Removes an item with id", "param" : [{"name" : "itemId", "text" : "Id to remove"}, {"name" : "mod", "text" : "Owning mod, defaults to null"}]}, {"name" : "T:Farmhand.Registries.ModRegistry", "summary" : "Holds a reference to every loaded mod manifest"}, {"name" : "M:Farmhand.Registries.ModRegistry.GetItem(Farmhand.Helpers.UniqueId{System.String})", "summary" : "Returns a selected mod manifest", "param" : {"name" : "key", "text" : "The Unique ID of the mod"}, "returns" : ""}, {"name" : "M:Farmhand.Registries.ModRegistry.GetRegisteredItems", "summary" : "Returns all registered mods", "returns" : ""}, {"name" : "M:Farmhand.Registries.ModRegistry.RegisterItem(Farmhand.Helpers.UniqueId{System.String},Farmhand.Registries.Containers.ModManifest)", "summary" : "Registers a mod", "param" : [{"name" : "itemId", "text" : "The UniqueID of the mod"}, {"name" : "item", "text" : "The mod manifest"}]}, {"name" : "M:Farmhand.Registries.ModRegistry.UnregisterItem(Farmhand.Helpers.UniqueId{System.String})", "summary" : "Unregisters a mod", "param" : {"name" : "itemId", "text" : "The Unique ID of the mod"}}, {"name" : "T:Farmhand.Registries.Registry`2", "summary" : "A general use registry class.", "typeparam" : [{"name" : "TKey", "text" : "The UniqueID type"}, {"name" : "T", "text" : "The type to store"}]}, {"name" : "M:Farmhand.Registries.Registry`2.#ctor", "summary" : "Default Constructor"}, {"name" : "P:Farmhand.Registries.Registry`2.RegisteredItems", "summary" : "Registered Items"}, {"name" : "M:Farmhand.Registries.Registry`2.GetItem(`0)", "summary" : "Returns the value with the matching key", "param" : {"name" : "key", "text" : "Key to find"}, "returns" : ""}, {"name" : "M:Farmhand.Registries.Registry`2.RegisterItem(`0,`1)", "summary" : "Registers a new item", "param" : [{"name" : "key", "text" : "Key to register with"}, {"name" : "item", "text" : "Item to register"}]}, {"name" : "M:Farmhand.Registries.Registry`2.GetRegisteredItems", "summary" : "Gets all registered items", "returns" : "All registered items"}, {"name" : "M:Farmhand.Registries.Registry`2.GetAll", "summary" : "Returns the internal dictionary object", "returns" : ""}, {"name" : "M:Farmhand.Registries.Registry`2.UnregisterItem(`0)", "summary" : "Removes an item", "param" : {"name" : "key", "text" : "Key of item to remove"}}, {"name" : "T:Farmhand.Registries.TextureRegistry", "summary" : "Holds a reference to loaded textures. This class stores ordinary textures passed through but it primarily used to store mod textures"}, {"name" : "M:Farmhand.Registries.TextureRegistry.GetRegisteredTextures", "summary" : "Returns all registered textures", "returns" : "All registered textures"}, {"name" : "M:Farmhand.Registries.TextureRegistry.GetItem(System.String,Farmhand.Registries.Containers.ModManifest)", "summary" : "Returns item with matching id", "param" : [{"name" : "itemId"}, {"name" : "mod", "text" : "Owning mod, defaults to null"}], "returns" : "Matching texture"}, {"name" : "M:Farmhand.Registries.TextureRegistry.RegisterItem(System.String,Farmhand.Registries.Containers.DiskTexture,Farmhand.Registries.Containers.ModManifest)", "summary" : "Registers item with it", "param" : [{"name" : "itemId", "text" : "Id of item to register"}, {"name" : "item", "text" : "Texture to register"}, {"name" : "mod", "text" : "Owning mod, defaults to null"}]}, {"name" : "M:Farmhand.Registries.TextureRegistry.UnregisterItem(System.String,Farmhand.Registries.Containers.ModManifest)", "summary" : "Removes an item with id", "param" : [{"name" : "itemId", "text" : "Id to remove"}, {"name" : "mod", "text" : "Owning mod, defaults to null"}]}, {"name" : "T:Farmhand.Registries.XnbRegistry", "summary" : "Stores registered XNB overloads"}, {"name" : "M:Farmhand.Registries.XnbRegistry.GetItem(System.String,Farmhand.Registries.Containers.ModManifest,System.Boolean)", "summary" : "Get ModXnb with key", "param" : [{"name" : "itemId", "text" : "Id of ModXnb to return"}, {"name" : "mod", "text" : "Mod this ModXnb belongs to"}, {"name" : "ignoreModPrefixes", "text" : "Whether this search should ignore mod-filtering prefixes"}], "returns" : "Matching ModXnb"}, {"name" : "M:Farmhand.Registries.XnbRegistry.GetRegisteredItems", "summary" : "Returns all registered ModXnbs", "returns" : "All ModXnbs"}, {"name" : "M:Farmhand.Registries.XnbRegistry.RegisterItem(System.String,Farmhand.Registries.Containers.ModXnb,Farmhand.Registries.Containers.ModManifest)", "summary" : "Register ModXnb with key", "param" : [{"name" : "itemId", "text" : "Id of ModXnb to return"}, {"name" : "item", "text" : "ModXnb to register"}, {"name" : "mod", "text" : "Mod this ModXnb belongs to"}]}, {"name" : "M:Farmhand.Registries.XnbRegistry.UnregisterItem(System.String,Farmhand.Registries.Containers.ModManifest)", "summary" : "Remove ModXnb", "param" : [{"name" : "itemId", "text" : "Id of ModXnb to remove"}, {"name" : "mod", "text" : "Mod this ModXnb belongs to"}]}, {"name" : "T:Farmhand.Test", "summary" : "Used for testing IL generation. Do not use this class since it's entirely useless."}]}}}